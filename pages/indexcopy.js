import Head from 'next/head'
import Image from "next/image";
import { Inter } from "next/font/google";
import Link from "next/link";
import { useState, useEffect } from "react";

export default function Home() {
  const [screenWidth, setScreenWidth] = useState(null);

  useEffect(() => {
    setScreenWidth(window.innerWidth);
    window.addEventListener("resize", () => {
      setScreenWidth(window.innerWidth);
    });

    return () => {
      window.removeEventListener("resize", () => {});
    };
  }, []);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="relative flex flex-col justify-center items-center min-h-screen bg-gray-100 overflow-hidden">
      <div className="absolute top-6 -right-2 w-44 h-44 bg-purple-400 rounded-full mix-blend-multiply filter blur-xl opacity-50 "></div>
      <div className="absolute top-6 right-28 w-44 h-44 bg-yellow-400 rounded-full mix-blend-multiply filter blur-xl opacity-50"></div>
      <div className="absolute top-20 right-4 w-44 h-44 bg-pink-400 rounded-full mix-blend-multiply filter blur-xl opacity-50 "></div>

      <div className="absolute bottom-0 left-0 w-44 h-44 bg-purple-400 rounded-full mix-blend-multiply filter blur-xl opacity-50 "></div>
      <div className="absolute bottom-0 left-32 w-44 h-44 bg-yellow-400 rounded-full mix-blend-multiply filter blur-xl opacity-50"></div>
      <div className="absolute bottom-16 left-20 w-44 h-44 bg-pink-400 rounded-full mix-blend-multiply filter blur-xl opacity-50"></div>

      {/* Change according to screen width */}
      {screenWidth && screenWidth >= 1200 ? (
        <span className="flex flex-row items-center justify-between">
          <Image className="mr-20"
            src="/imf-1.gif"
            alt="left image"
            width={400}
            height={400}
          />
          <div className="flex flex-col items-center justify-center">
            <div className="flex flex-col items-center justify-center">
              <Image
                src="/ToDo.png"
                alt="Logo"
                className="mx-auto mb-2 animate-bounce"
                height={400}
                width={400}
              />
              <h1 className="text-[28px] font-semibold mt-2 text-gray-700">
                Task Mate
              </h1>
            </div>
            <button
              className="bg-orange-600 hover:bg-orange-700  mt-4 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline"
              type="button"
            >
              Get Started
            </button>
            <Link
              href="/learn-more"
              className="inline-block align-baseline mt-4 font-bold text-sm text-purple-700 hover:text-purple-800"
            >
              Learn More
            </Link>
  
          </div>
          <Image className="ml-20"
            src="/imf-2.gif"
            alt="right image"
            width={390}
            height={390}
          />
        </span>
      ) : (
        <div>
          <div className="flex flex-col items-center justify-center">
            <Image
              src="/ToDo.png"
              alt="Logo"
              className="mx-auto mb-2 animate-bounce"
              height={400}
              width={400}
            />
            <h1 className="text-[28px] font-semibold  text-gray-700 ml-4">
              Task Mate
            </h1>
           
            <button
              className="bg-orange-600 hover:bg-orange-700  mt-4 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline"
              type="button"
            >
              Get Started
            </button>
            <Link
              href="/learn-more"
              className="inline-block align-baseline mt-4 font-bold text-sm text-purple-700 hover:text-purple-800"
            >
              Learn More
            </Link>
            
          </div>
        </div>
      )}
    </div>
    </>
  )
}


// export async function getServerSideUser(context) {
//   // Parse cookies from the request headers
//   const cookies = parse(context.req.headers.cookie || "");
//   const token = cookies.access_token;

//   try {
//     // Verify the JWT token
//     let decoded = await jwt.verify(token, process.env.JWT_SECRET);
//     // console.log(decoded._id);
//     let user = await User.findOne({ _id: decoded._id });
//     // let user_Cluster = await Cluster.findOne({ user_id: user._id });
//     // console.log(user_Cluster);

//     if (user) {
//       decoded = { name: user.name, email: user.email };
//       // console.log(decoded);
//     }

//     return {
//       User: {
//         user_details: decoded,
//         // Cluster: user_Cluster.Cluster
//       },
//     };
//   } catch (err) {
//     // Handle invalid or expired token
//     return {
//       redirect: {
//         destination: "/login", // Redirect to login page if the token is invalid or expired
//         permanent: false,
//       },
//     };
//   }
// }